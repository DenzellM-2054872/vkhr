#version 460 core

#include "ppll.glsl"

layout(local_size_x = 8,    local_size_y = 8) in;
layout(binding = 9, rgba8) uniform image2D color;

// Resolve step based on the PPLL code in TressFX:
// TressFX/amd_tressfx/src/Shader/TressFXPPLL.hlsl
// with some minor modifications for OpenGL usage.

#define K_BUFFER_SIZE 16
#define MAX_FRAGMENTS 1024

void mainSorted() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    uint  pixel_head_node = ppll_head_node(pixel);
    vec4 resolved_color = imageLoad(color, pixel);
    float prev_depth = PPLL_MAXIMUM_DEPTH;

    while(pixel_head_node != PPLL_NULL_NODE){
        Node node = ppll_node(pixel_head_node);


        vec4 fragment_color = unpackUnorm4x8(node.color);
        resolved_color = mix(resolved_color, fragment_color, fragment_color.a);
        pixel_head_node = node.prev;
        prev_depth = node.depth;
    }

    imageStore(color, pixel, resolved_color);

}

void main() {
    ivec2 pixel = ivec2(gl_GlobalInvocationID.xy);
    uint  pixel_head_node = ppll_head_node(pixel);

    if (pixel_head_node == PPLL_NULL_NODE){
        return;
    }

    Node nodes[K_BUFFER_SIZE];

    // Makes sure k-buffer gets maximum depth.
    // And inserts the first elements of the PPLL.
    for (uint k = 0; k < K_BUFFER_SIZE; ++k) {
        if (pixel_head_node != PPLL_NULL_NODE) {
            nodes[k] = ppll_node(pixel_head_node);
            pixel_head_node = nodes[k].prev;
        } else{
            nodes[k].depth = PPLL_MAXIMUM_DEPTH;
            nodes[k].color = 0;
        }
    }

    // Background results will be blended as well.
    vec4 resolved_color = imageLoad(color, pixel);

    // Replaces fragments in k-buffer if there
    // are any "closer" fragments in the PPLL.
    // Other ones are blended without sorting.
    for (uint f = 0; f < MAX_FRAGMENTS; ++f) {
        if (pixel_head_node == PPLL_NULL_NODE)
            break;

        float furthest_depth = 0;
        uint  furthest_index = 0;

        // Find furthest fragment in our k-buffer.
        for (uint k = 0; k < K_BUFFER_SIZE; ++k) {
            if (nodes[k].depth > furthest_depth) {
                furthest_depth = nodes[k].depth;
                furthest_index = k;
            }
        }

        Node fragment = ppll_node(pixel_head_node);
        uint next_pixel_head_index = fragment.prev;

        // If PPLL node is closer, we swap it!
        if (fragment.depth < furthest_depth) {
            Node tmp = nodes[furthest_index];
            nodes[furthest_index] = fragment;
            fragment = tmp; // Will be merged
        }

        vec4 fragment_color = unpackUnorm4x8(fragment.color);

        // Blend fragments in an OIT-way, not really sorted.
        resolved_color = mix(resolved_color, fragment_color,
                             fragment_color.a);

        pixel_head_node = next_pixel_head_index;
    }

    // Just make sure the *top-most* fragments
    // are correctly blended by sorting these!
    for (uint k = 0; k < K_BUFFER_SIZE; ++k) {
        float furthest_depth = 0;
        uint  furthest_index = 0;

        // Find furthest fragment in our k-buffer.
        for (uint i = 0; i < K_BUFFER_SIZE; ++i) {
            if (nodes[i].depth > furthest_depth) {
                furthest_depth = nodes[i].depth;
                furthest_index = i;
    }
}

        nodes[furthest_index].depth = 0; // Ignore

        vec4 node_color = unpackUnorm4x8(nodes[furthest_index].color);

        // Blend the fragments correctly: back-to-front.
        resolved_color = mix(resolved_color, node_color,
                             node_color.a);
    }

    imageStore(color, pixel, resolved_color);
}
